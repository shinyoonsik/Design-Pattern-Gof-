1. FlyweightPattern
	- 정의: 비용이 큰 자원을 "공통으로 사용할 수 있도록" 만든 패턴이다. 비용이 크지 않더라도 굳이 매번 새롭게 만들 필요가 없는 자원에 대해서도 적용
		(자원에 대한 비용은 크게 두가지로 나눠 볼 수 있다)
		-> 중복 생성될 가능성이 높은 경우; 중복 생성될 가능성이 높다는 것은 동일한 자원이 자주 사용될 가능성이 높다는 것을 의미한다.
		     이런 자원을 공통 자원 형태로 관리해 주는 편이 좋다
		-> 자원 생성 비용은 큰데 사용 빈도가 낮은 경우; 이런 자원을 미리 생성해 두는 것은 낭비이다. 따라서 요청이 있을 때에 생성해서 제공해 주는 편이 좋다. 즉 따로 때어내어 놓고 필요시 생성하여 제공
		-> 요약: 서로 중복되는 속성과 사용시 비용이 많으 드는 경우를 공유 속성으로 관리하자!!!
		-> 단점: 공유 객체에 대해 개별 설정이 불가능하다

		-> 자원의 생성을 담당하는 Factory역할과 관리역할을 분리하는 것이 좋으나, 일반적으로는 두 역할의 크게 다르지 않아 하나의 클래스가 담당하도록 한다
	- 사용 사례: 
		-> 자바의 String constant pool
			- https://ict-nroo.tistory.com/18참고

		-> 자바의 객체 복사 방법
			1) 얕은 복사(Shallow Copy): 객체의 참조값(주소값)을 복사해서 할당하기 때문에 해당 메모리 주소의 값이 변경되면 원본 인스턴스 및 복사 인스턴스의 변수 값은 같이 변경된다
				Data d1 = new Data();
				Data d2 = d1;
			2) 깊은 복사(Deep Copy): 객체 전부를 복사. 복사된 새로운 인스턴스(다른 메모리주소를 가지는)가 할당됨
				implements Cloneable을 통해 clone메소드를 오버라이드 해야 함
		얕은 복사의 경우에 flyweight pattern이 적용됨. 
		// 한 번 heap메모리에 만들어 놓은 인스턴스를 다른 변수가 참조하려고 할때 인스턴스 전체를 복사해서 주는 것이 아닌 기존에 생성된 인스턴스의 주소값을 넘겨줌. 따라서 인스턴스를 공유하게 됨
		
	
